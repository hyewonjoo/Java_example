package com.test.java.question.CodeReview;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Q1 {
	public static void main(String[] args) throws NumberFormatException, IOException {

		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));

		int[] nums = new int[5];

		for (int i = 0; i < nums.length; i++) {
			System.out.print("숫자 : ");
			nums[i] = Integer.parseInt(reader.readLine());
		}

		for (int i = 4; i >= 0; i--) {
			System.out.printf("nums[%d] = %d\n", i, nums[i]);
		}
	}
}
// 동일하게 풀이






package com.test.java.question.CodeReview;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Arrays;

public class Q2 {
	public static void main(String[] args) throws Exception {
		
		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
		System.out.print("학생 수 : ");// 학생수 받기
		int student_num = Integer.parseInt(reader.readLine());
		String[] student = new String[student_num]; // 학생수를 배열길이로 선언

		for (int i = 0; i < student.length; i++) {
			System.out.print("학생명 : ");// 배열 길이만큼 학생이름 받기
			String student_name = reader.readLine();
			student[i] = student_name;// 받은 학생 이름을 배열에 저장
		}

		Arrays.sort(student); // Arrays.sort(); 대신 compareTo 사용
		System.out.printf("입력한 학생은 총 %d명입니다\n", student_num); // 받은 학생 수 출력

		for (int i = 0; i < student.length; i++) {// 배열 길이만큼 출력
			System.out.printf("%d. %s\n", i + 1, student[i]); // 배열은 0부터 시작하기에 i에 1을 더해준다.(******)

		}
	}
}
/*
코드리뷰]

 - Arrays.sort 대신 compareTo 사용하여 풀어보기
 - compareTo : 1(오름차순), 0, -1(내림차순)

ex)
    for (int i=0; i<student.length; i++) {
			
		for (int j = 0; j<length-i-1; j++) {
				
			if (student[j].compareTo(student[j+1]) > 0)    //1이 나와야 오름차순 정렬됨
	
 */






package com.test.java.question.CodeReview;

public class Q3 {
	public static void main(String[] args) {
		/*
		 요구사항]
		int 배열을 매개변수로 받아 내용을 문자열로 반환하는 dump 메소드를 구현하시오.
		
		조건..
		String dump(int[] list)
		
		호출..
		int[] list = new int[4];
		list[0] = 10;
		list[1] = 20;
		list[2] = 30;
		list[3] = 40;
		String result = dump(list);
		System.out.printf("nums = %s\n", result);
		출력..
		
		nums = [ 10, 20, 30, 40 ]
		 */


		int[] list = new int[4]; // 배열 길이 선언
		list[0] = 10;
		list[1] = 20;
		list[2] = 30;
		list[3] = 40;// 값 선언

		String result = dump(list);
		System.out.printf("nums = %s \n", result);


	}// main

	public static String dump(int[] ns) {
		String txt = "[";

		for (int i = 0; i < ns.length; i++) {
			if (i == ns.length - 1) {
				txt += ns[i];
			} else {
				txt += ns[i] + ", ";
			}
		}
		txt += "]";

		return txt;
	}
}

// - 동일하게 풀이








package com.test.java.question.CodeReview;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Arrays;

public class Q4 {
	public static void main(String[] args) throws Exception {

		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
		// 1. 먼저 1~20 사이의 난수를 담고 있는 배열 생성하기
		int[] list = new int[20];
		for (int i = 0; i <= list.length - 1; i++) {
			list[i] = (int) (Math.random() * 20 + 1);
		}

		System.out.println("원본 : " + Arrays.toString(list));

		// 최대최소값
		// 오름차순으로 정렬 -> index0은 최소 index19는 최대값으로 출력
		for (int i = 0; i < list.length - 1; i++) {// 싸이클
			for (int j = 0; j < list.length - 1 - i; j++) {// 스텝
				if (list[j] > list[j + 1]) {
					int temp = list[j]; // 순서주의
					list[j] = list[j + 1]; // 오른쪽에서 왼쪽 대입 신경쓰기
					list[j + 1] = temp;

				}

			}
		}

		System.out.println(Arrays.toString(list));
		System.out.printf("최대값 : %d\n", list[19]);
		System.out.printf("최솟값 : %d\n", list[0]);
	}
}
/*
  코드리뷰]
  - 원본값에 []를 표기하였고 원본값을 확인하기 편하도록 오름차순으로 정렬하여 원본 하단에 출력하였다.
  - 그 외 동일하게 풀이
 */









package com.test.java.question.CodeReview;

import java.io.BufferedReader;
import java.io.InputStreamReader;

public class Q5 {
	public static void main(String[] args) throws Exception {
		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));

		int[] list = new int[20]; // 길이 20의 배열 생성

		for (int i = 0; i < 20; i++) {
			list[i] = (int) (Math.random() * 20) + 1; // 난수 20개의 값을 리스트에 저장
		}
		System.out.print("최대 범위 : ");
		int max = Integer.parseInt(reader.readLine());// 최대범위 입력받음
		System.out.print("최소 범위 : ");
		int min = Integer.parseInt(reader.readLine());// 최소범위 입력받음

		System.out.println();

		if (min < max && min > 0) {

			original(list); // 배열 출력 메소드

			result(list, min, max); // 범위 출력 메소드

		} else {
			System.out.println("다시 입력하세요");
		}



	}// main


	private static void original(int[] list) {

		System.out.print("원본 : ");

		for (int i = 0; i < 20; i++) {
			if (i < 19) {
				System.out.printf("%d, ", list[i]);
			} else {
				System.out.println(list[i]);
			} // for문을 사용하여 마지막 19번쨰 열에 쉼표가 붙지 않도록 함
		}

	}

	private static void result(int[] list, int min, int max) {
		String aa = "";
		for (int i = 0; i < 20; i++) {
			if (list[i] >= min && list[i] <= max) {
				aa += list[i] + ", ";

			} // if//
		} // for

		System.out.printf("결과 : %s\b\b"); // 백스페이스 콘솔 깨진문 재발생

	}// dump
}

// - 동일하게 풀이







package com.test.java.question.CodeReview;

import java.util.Arrays;

public class Q6 {
	public static void main(String[] args) {

		int[] list = new int[6];
		int count = 0; // int 값 생성

		for (int i = 0; i < 6; i++) {

			int random_num = (int) (Math.random() * 45) + 1; // 0에서부터 6까지 45 안에서 random (난수)를 입력하는
																// 변수를 생성

			for (int j = 0; j < i; j++) {

				if (list[j] == random_num && list[j] == 0) {
					// list 값(6) 만큼 넣어줌

					i--;// 이 회차를 한 번 실행 > 빈칸이 생기지 않기 위해서
					count++;

				}

			}

			if (count == 0) { // 중복값이 없을 경우

				list[i] = random_num; // i에 랜덤값 저장

			}
			count = 0; // 초기화 진행 > 계속 loop문을 돌도록
		}
		buble(list);
		System.out.println(Arrays.toString(list));

	}

	private static void buble(int[] list) { // 오름차순 정렬 메소드

		for (int i = 0; i < list.length; i++) {

			for (int j = 0; j < list.length - i - 1; j++) {

				if (list[j] > list[j + 1]) {

					int temp = list[j];
					list[j] = list[j + 1];
					list[j + 1] = temp;

				}
			}
		}
	}
}
/*
코드리뷰]

오름차순 정렬 메소드 대신 for문을 작성
중복값 검사 후 중복시 다른 랜덤값을 가져오게 하는 코드

ex)

for (int i = 0; i <list.length -1; i++){
  for ( int j =0; j<list.length -1-i; j++){
    if (list[j] == list[j+1]){
      int temp = (int )(Math.random()*45 -1);
      list[j] = thmp;
    }

    if (list[j] > list[j+1]){
      int temp = list[j];
      list[j] = list[j+1];
      list[j+1] = temp;
    }
  }
}

System.out.println(arrays.toString(list));

but 중복 int의 값이 2개 나와서 하나를 랜덤으로 돌렸을때 다시 중복된 값이 나올 수 있음. 

+boolean으로도 풀이해볼것

*/








package com.test.java.question.CodeReview;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Arrays;

public class Q7 {
	public static void main(String[] args) throws Exception {

		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));

		int[] original = {5, 6, 1, 3, 2, 8, 7, 4, 10, 9};
		int[] result = new int[10];

		System.out.print("삽입 위치 : ");
		int index = Integer.parseInt(reader.readLine());
		System.out.print("값 : ");
		int value = Integer.parseInt(reader.readLine()); // 삽입 위치와 값을 받아
		int j = 0; // 0으로 초기화

		for (int i = 0; i < 10; i++) {


			if (i == index) { // i와 삽입위치 값이 같으면

				result[index] = value; // 해당 배열의 위치에 값을 저장한다.

			} else { // 그렇지 않은 경우

				result[i] = original[j]; // i==index일때 j++가 실행되지 않았기에 value 저장 이후의 배열은 original 값이
											// 하나씩 뒤로 밀려 저장됨
				j++;

			}

		}

		System.out.printf("원본 : %s\n", Arrays.toString(original));
		System.out.printf("결과 : %s\n", Arrays.toString(result));

	}
}
/*
 코드리뷰]
  - 동일하게 풀이
  - 강사님의 풀이방법으로도 풀어보기
 */










package com.test.java.question.CodeReview;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Arrays;

public class Q8 {
	public static void main(String[] args) throws Exception {

		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
		int[] list = {5, 6, 1, 3, 2, 8, 7, 4, 10, 9}; // 배열 값 선언


		// 입력
		System.out.print("삭제 위치 : ");
		int deletePoint = Integer.parseInt(reader.readLine());// 삭제위치 입력받아

		// 원본
		System.out.printf("원본 : %s\n", Arrays.toString(list));// 원본 출력

		for (int i = deletePoint; i < list.length - 1; i++) {
			list[i] = list[i + 1]; // 삭제 위치 이후의 값들은 오른쪽부터 하나씩 앞으로 당겨오기
		}

		list[list.length - 1] = 0; // 배열의 끝을 0으로 출력

		System.out.printf("결과 : %s", Arrays.toString(list));


	}
}
/*
 코드리뷰]
 
 - 값을 뒤로 미는 방법 대신 배열을 새로 만들어서 풀어본다면?
 
 System.out.print("삭제 위치 : ");
		int deletePoint = Integer.parseInt(reader.readLine());
		
		int [] newList = new int [10];
		
		for (int i = 0; i <= newList.length -1; i++){
		  if ( i < deletePoint) {
		    newList[i] = list[i];
		  }
		  
		  if ( i >= deletePoint && i < newList.length -1) {
		    newList[i] = list[i+1];
		  }
		  
		  if ( i == newList.length -1) {
		    newList[i] = 0;
		  }
		
- 출력 결과는 동일함.		
  
*/







package com.test.java.question.CodeReview;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;

public class Q9 {
	public static void main(String[] args) throws NumberFormatException, IOException {

		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));

		System.out.print("배열 길이 : ");
		int lengthOfArray = Integer.parseInt(reader.readLine());
		int lengthOfArray_half = // 홀수값일 경우 +1 /2
				lengthOfArray % 2 == 0 ? lengthOfArray / 2 : (lengthOfArray + 1) / 2;

		int[] list = new int[lengthOfArray];
		int[] listResult = new int[lengthOfArray_half]; // 결과 값에 half값도 저장

		// 원본배열 만들기
		for (int i = 0; i < lengthOfArray; i++) {
			list[i] = (int) (Math.random() * 9) + 1;
		}


		if (lengthOfArray % 2 != 0) { // /2의 결과가 홀수일 경우 (=배열의 길이가 홀수)

			for (int i = 0; i < lengthOfArray / 2; i++) {

				listResult[i] = list[i * 2] + list[i * 2 + 1]; // 원본값을 순차적으로 2개씩 더하나 마지막 값이 나오지 않음
			}

			listResult[lengthOfArray_half - 1] = list[lengthOfArray - 1]; // 배열의 마지막 값에 원본의 마지막 값을
																			// 대입

			System.out.println(Arrays.toString(list));
			System.out.println(Arrays.toString(listResult));


		} else {

			for (int i = 0; i < lengthOfArray_half; i++) { // 배열의 길이가 짝수일 경우는 마지막 값이 잘 출력됨

				listResult[i] = list[i * 2] + list[i * 2 + 1];// 원본값을 순차적으로 2개씩 더한다.
			}


			System.out.println(Arrays.toString(list));
			System.out.println(Arrays.toString(listResult));
		}
	}
}
 //- 동일하게 풀이








