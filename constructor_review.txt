public class Q01 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		// 학생 1
		Student s1 = new Student(); // 기본 생성자 호출
		System.out.println(s1.info());

		// 학생 2
		Student s2 = new Student("홍길동", 13); // 오버로딩 생성자 호출
		System.out.println(s2.info());

		// 학생 3
		Student s3 = new Student(3, 10, 30); // 오버로딩 생성자 호출
		System.out.println(s3.info());

		// 학생 4
		Student s4 = new Student("아무개", 12, 1, 5, 11); // 오버로딩 생성자 호출
		System.out.println(s4.info());
	}

}


class Student {
	private String name;
	private int age;
	private int grade;
	private int class1;
	private int number;
	private String txt = "";


	private String age1 = "";
	private String grade1 = "";
	private String class2 = "";
	private String number1 = "";


	public Student() {// 기본생성자
		this("미정", 0, 0, 0, 0);
		age1 = String.valueOf(age);
		age1 = "미정";
		grade1 = String.valueOf(grade);
		grade1 = "미정";
		class2 = String.valueOf(class1);
		class2 = "미정";
		number1 = String.valueOf(number);
		number1 = "미정";
	}

	// 오버로딩
	public Student(String name, int age) {
		this(name, age, 0, 0, 0); // 생성자 호출
		grade1 = String.valueOf(grade);
		grade1 = "미정";
		class2 = String.valueOf(class1);
		class2 = "미정";
		number1 = String.valueOf(number);
		number1 = "미정";


	}

	public Student(int grade, int class1, int number) {
		this("미정", 0, grade, class1, number);
		age1 = String.valueOf(age);
		age1 = "미정";

	}



	public Student(String name, int age, int grade, int class1, int number) { // 매개변수로 들어온 int값을
																				// String으로 바꿔줌

		this.name = name;


		this.age = age;
		String age1 = String.valueOf(age);
		this.age1 = age1;

		this.grade = grade;
		String grade1 = String.valueOf(grade);
		this.grade1 = grade1;

		this.class1 = class1;
		String class2 = String.valueOf(class1);
		this.class2 = class2;

		this.number = number;
		String number1 = String.valueOf(number);
		this.number1 = number1;

	}


	public String info() {
		return txt =
				String.format("%s(나이:%s 학년:%s 반:%s 번호:%s)", name, age1, grade1, class2, number1);
	}

}
코드리뷰 
굳이 생성자 안에서 형변환 할 필요없이
String format을 사용하여 String.format("%s, this.name==0? "미정":"string.ValueOf(name))이라고 간편하게 바꿔주면
코드의 길이가 훨씬 깔끔해지고 가독성도 높아진다.
-----------------------------------------------------------------------------------------------------------------------------------------
package com.text.java.question.obj.constructor;

public class Q02 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		// 시간 1
		Time t1 = new Time(); // 기본 생성자 호출
		System.out.println(t1.info());

		// 시간 2
		Time t2 = new Time(2, 30, 45); // 오버로딩 생성자 호출
		System.out.println(t2.info());

		// 시간 3
		Time t3 = new Time(1, 70, 30); // 오버로딩 생성자 호출
		System.out.println(t3.info());

		// 시간 4
		Time t4 = new Time(30, 10); // 오버로딩 생성자 호출
		System.out.println(t4.info());

		// 시간 5
		Time t5 = new Time(90, 10); // 오버로딩 생성자 호출
		System.out.println(t5.info());

		// 시간 6
		Time t6 = new Time(50); // 오버로딩 생성자 호출
		System.out.println(t6.info());

		// 시간 7
		Time t7 = new Time(10000); // 오버로딩 생성자 호출
		System.out.println(t7.info());

	}

}


class Time {
	private int hour;
	private int minute;
	private int second;
	private String output = "";

	public Time() {
		this(0, 0, 0);
	}

	public Time(int second) {
		this(0, 0, second);
	}

	public Time(int minute, int second) {
		this(0, minute, second);
	}



	public Time(int hour, int minute, int second) {



		if (second >= 60) {
			for (int i = 1; i <= (second / 60); i++) {

				minute = minute + 1;
				this.minute = minute;
				this.second = second - 60 * i;
			}
		} else {
			this.second = second;

		}

		if (minute >= 60) {
			for (int i = 1; i <= (minute / 60); i++) {
				hour = hour + 1;
				this.minute = minute - 60 * i;
				this.hour = hour;
			}
		} else {
			this.minute = minute;
		}

		this.hour = hour;

	}

	public String info() {
		return String.format("%02d:%02d:%02d", hour, minute, second);

	}

}

코드리뷰*
마지막 부분에서 본인은 if문과 for문을 사용하여 초와 분이 60초 60분을 넘어가면 분과 시에
1씩 더해주도록 코드를 짰지만,
public String info() {
		Calendar time = Calendar.getInstance();
		
		// Calendar.HOUR / Calendar.MINUTE, / Calendar.SECOND는 각각 따로 set을 해줘야한다.
		time.set(Calendar.HOUR_OF_DAY, this.hour);
		time.set(Calendar.MINUTE, this.minute);
		time.set(Calendar.SECOND, this.second);
		
		String output = String.format("%tT", time);
		
		return output;
	}
이런식으로 마지막 부분에 코드를 짜준다면 굳이 수학계산을 할 필요없이 간단하게 세팅 된다.
-----------------------------------------------------------------------------------------------------------------------------------------
package com.text.java.question.obj.constructor;

public class Q03 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		// 포장하는 직원
		Packer packer = new Packer();

		// 연필
		Pencil p1 = new Pencil();
		p1.setHardness("HB");
		Packer.packing(p1); // static 메소드를 사용할때는 앞에 클래스이름을 붙임, 객체 생성 따로 없이 바로 쓸 수 있음!!!

		Pencil p2 = new Pencil();
		p2.setHardness("4B");
		Packer.packing(p2);

		// 지우개
		Eraser e1 = new Eraser();
		e1.setSize("Large");
		Packer.packing(e1);

		// 볼펜
		BallPointPen b1 = new BallPointPen();
		b1.setThickness(0.3);
		b1.setColor("black");
		Packer.packing(b1);

		BallPointPen b2 = new BallPointPen();
		b2.setThickness(1.5);
		b2.setColor("red");
		Packer.packing(b2);

		// 자
		Ruler r1 = new Ruler();
		r1.setLength(30);
		r1.setShape("줄자");
		Packer.packing(r1);

		// 결과 확인
		packer.countPacking(0); // static 메소드를 사용할때는 앞에 클래스이름을 붙임, 객체 생성 따로 없이 바로 쓸 수 있음!!!
		packer.countPacking(1);
		packer.countPacking(2);
		packer.countPacking(3);
		packer.countPacking(4);
	}

}



class Packer {// 공통변수에 static을 붙여줌
	static int pencilCount;
	static int eraserCount;
	static int ballPointPencount;
	static int rulerCount;

	static void packing(Pencil pencil) {
		System.out.println(Pencil.info());

	}

	static void packing(Eraser eraser) {
		// 지우개 검수,포장
		System.out.println(Eraser.info());

	}

	static void packing(BallPointPen ballPointPen) {
		System.out.println(BallPointPen.info());
	}

	static void packing(Ruler ruler) {
		// 자를 검수,포장
		System.out.println(Ruler.info());

	}

	void countPacking(int type) {
		if (type == 0) {
			System.out.println("=======================");
			System.out.println("포장결과");
			System.out.println("=======================");
			System.out.println("연필 " + pencilCount + "회");
			System.out.println("지우개 " + eraserCount + "회");
			System.out.println("볼펜 " + ballPointPencount + "회");
			System.out.println("자 " + rulerCount + "회");
			System.out.println();
		}
		if (type == 1) {
			System.out.println("=======================");
			System.out.println("포장결과");
			System.out.println("=======================");
			System.out.println("연필" + pencilCount + "회");
			System.out.println();
		}
		if (type == 2) {
			System.out.println("=======================");
			System.out.println("포장결과");
			System.out.println("=======================");
			System.out.println("지우개" + eraserCount + "회");
			System.out.println();
		}
		if (type == 3) {
			System.out.println("=======================");
			System.out.println("포장결과");
			System.out.println("=======================");
			System.out.println("볼펜" + ballPointPencount + "회");
			System.out.println();
		}
		if (type == 4) {
			System.out.println("=======================");
			System.out.println("포장결과");
			System.out.println("=======================");
			System.out.println("자" + rulerCount + "회");
		}
	}
}


class Pencil {// 변수이름과 info앞에 static을 붙여야지 실행되는 이유 질문하기
	private static String input = "";

	public void setHardness(String input) {
		if (input.equals("4B")) {
			this.input = "4B";
			Packer.pencilCount++;
		}

		if (input.equals("3B")) {
			this.input = "3B";
			Packer.pencilCount++;
		}


		if (input.equals("2B")) {
			this.input = "2B";
			Packer.pencilCount++;
		}


		if (input.equals("B")) {
			this.input = "B";
			Packer.pencilCount++;
		}


		if (input.equals("HB")) {
			this.input = "HB";
			Packer.pencilCount++;
		}


		if (input.equals("2H")) {
			this.input = "2H";
			Packer.pencilCount++;
		}


		if (input.equals("3H")) {
			this.input = "3H";
			Packer.pencilCount++;
		}

		if (input.equals("4H")) {
			this.input = "4H";
			Packer.pencilCount++;
		}

	}

	static String info() {
		return String.format("포장 전 검수 : %s 진하기 연필입니다.\n포장을 완료했습니다.", input);
	}

}


class Eraser {

	private static String input;

	public void setSize(String input) {
		if (input.equals("Large")) {
			this.input = "Large";
			Packer.eraserCount++;
		}
		if (input.equals("Medium")) {
			this.input = "Medium";
			Packer.eraserCount++;
		}
		if (input.equals("small")) {
			this.input = "small";
			Packer.eraserCount++;
		}

	}

	static String info() {
		return String.format("포장 전 검수 : %s 사이즈 지우개입니다.\n포장을 완료했습니다.", input);
	}
}


class BallPointPen {
	private static double input;
	private static String input2;

	public void setThickness(double input) {
		if (input == 0.3) {
			this.input = 0.3;

		}
		if (input == 0.5) {
			this.input = 0.5;

		}
		if (input == 0.7) {
			this.input = 0.7;

		}
		if (input == 1) {
			this.input = 1;

		}
		if (input == 1.5) {
			this.input = 1.5;

		}

	}


	public void setColor(String input2) {
		if (input2.equals("red")) {
			this.input2 = "red";
			Packer.ballPointPencount++;

		}
		if (input2.equals("blue")) {
			this.input2 = "blue";
			Packer.ballPointPencount++;
		}
		if (input2.equals("green")) {
			this.input2 = "green";
			Packer.ballPointPencount++;
		}
		if (input2.equals("black")) {
			this.input2 = "black";
			Packer.ballPointPencount++;
		}

	}

	static String info() {
		return String.format("포장 전 검수: %s색상 %.1fmm 사이즈 볼펜입니다.\n포장을 완료했습니다.", input2, input);
	}


}


class Ruler {
	private static int input;
	private static String input2 = "";

	public void setLength(int input) {
		if (input == 30) {
			this.input = 30;
			Packer.rulerCount++;

		}
		if (input == 50) {
			this.input = 50;
			Packer.rulerCount++;
		}
		if (input == 100) {
			this.input = 100;
			Packer.rulerCount++;
		}
	}

	public void setShape(String input2) {
		if (input2.equals("줄자")) {
			this.input2 = "줄자";

		}
		if (input2.equals("운형자")) {
			this.input2 = "운형자";

		}
		if (input2.equals("삼각자")) {
			this.input2 = "삼각자";

		}

	}


	static String info() {
		return String.format("포장 전 검수: %dcm %s 입니다\n포장을 완료했습니다.", input, input2);
	}
}


코드리뷰
굳이 생성자를 호출할때마다 카운트를 해주는것이 아니라,
void packing(Pencil pencil)함수가 호출댈때마다 카운트를 해주는것이 훨씬 코드를 간편하게 만들어줌
그리고 출력부분에서도 본인은 노가다를 하여 일일히 출력해주었지만,
if 문을 사용하여 마지막 부분을 줄일 수 있으면 줄이는 것을 추천.




