-요구사항 : hashMap과 hashSet을 순수배열로 구현하기
package com.test.java.collection.example;

public class MyHashMap {
	private int index;
	private int index2;
	private int i;
	private String[] list;
	private String[] list2;

	public MyHashMap() { // 생성자
		this.index = 0;
		this.index2 = 0;

	}



	public String put(String key, String value) {
		init();
		// 배열 채우기 전 중복검사
		// 중복검사
		if (indexOf(key) > -1) {// 만약 key 값이 기존에 존재했다면?
			this.list[i] = value; // 새로운 value값을 넣어준다.
		}

		// 추가할 요소의 키
		if (index == list.length) {// 인덱스가 배열의 길이와 같을경우 두배늘리기
			String[] temp = new String[list.length * 2];
			for (int i = 0; i < list.length; i++) {
				temp[i] = list[i];
			}
			list = temp;
			this.list[this.index] = key;
			this.index++;

		} else {
			this.list[this.index] = key;
			this.index++;
		}



		// 추가할 요소의 키
		if (index2 == list2.length) {// 인덱스가 배열의 길이와 같을경우 두배늘리기
			String[] temp = new String[list.length * 2];
			for (int i = 0; i < list2.length; i++) {
				temp[i] = list2[i];
			}
			list2 = temp;
			this.list2[this.index2] = value;
			this.index2++;
		} else {
			this.list2[this.index2] = value;
			this.index2++;
		} // 배열을 다 채움



		return null;
	}

	// 배열 인덱스 반환 메소드
	private int indexOf(String key) {
		if (index > 2) { // 배열에 국어,영어,수학이 가장 처음으로 들어간 이후부터 중복검사
			for (i = 0; i < list.length; i++) { // 배열에 key와 같은 값이 있으면 인덱스 반환
				if (list[i].equals(key)) {
					return i;
				}
			}
			return -1;
		}
		return -1;
	}


	private void init() {
		if (index == 0) {
			this.list = new String[4];
		}
		if (index2 == 0) {
			this.list2 = new String[4];
		}


	}



	public String get(String key) {
		for (int i = 0; i < this.index; i++) {
			if (this.list[i].equals(key)) {
				return this.list2[i];
			}
		}


		return null;
	}



	public int size() {

		return index;
	}



	public String remove(String key) {
		for (int i = 0; i < list.length; i++) {
			if (i < list.length - 1) {
				if (this.list[i] == key) {
					this.list2[i] = list[i + 1];
				}

			}

			return list2[i];
		}
		return list2[i];
	}



	public boolean containKey(String key) {
		for (int i = 0; i < list.length; i++) {
			if (list[i].equals(key)) {
				return true;
			}

		}
		return false;

	}



	public boolean containsValue(String value) {
		for (int i = 0; i < list2.length; i++) {
			if (list2[i].equals(value)) {
				return true;
			}
		}
		return false;
	}


	public void tirmToSize() {
		String[] newList = new String[index];
		String[] newList2 = new String[index2];
		for (int i = 0; i < newList.length; i++) {
			newList[i] = list[i];
			newList2[i] = list2[i];
		}
		list = newList;
		list2 = newList2;
	}

	public void clear() {
		index = 0;
		index2 = 0;
	}
}


----------------------------------------------------------------------------------------------------------------
package com.test.java.collection.example;

public class MySet {
	private int index;
	private String[] list;
	private int number;
	private int count;


	public MySet() {// 기본생성자
		this.index = 0;
		this.count = 0;
	}

	public boolean add(String value) {
		init();
		if (checkLength()) {
			doubleLength();
		}
		list[index] = value;
		index++;
		return true;

	}

	// 첫번째 인덱스일때 배열생성
	public void init() {
		if (index == 0) {
			list = new String[4];
		}

	}

	public boolean checkLength() {
		if (index == list.length - 1) {
			return true;

		}
		return false;

	}

	public void doubleLength() {
		String[] newList = new String[list.length * 2];
		for (int i = 0; i < list.length; i++) {
			newList[i] = list[i];
		}
		list = newList;
	}

	public int size() {

		return index;
	}

	// left shift = 요소삭제
	public boolean remove(String string) {
		findIndex(string);
		for (int i = number; i < list.length - 2; i++) {
			list[i] = list[i + 1];
		}
		index--;
		return true;

	}

	// remove 매개변수 string의 index를 찾아서 반환해주는 메소드
	public int findIndex(String string) {
		for (int i = 0; i < list.length; i++) {
			if (list[i].equals(string)) {
				number = i;
				return number;
			}
		}
		return -1;
	}
	// 인덱스 총 2개


	public boolean hasNext() {
		if (count < this.index) { // 마지막 순서의 배열이 아닐 경우 true
			return true;
		}
		return false;
	}

	public String next() {
		count++;
		return list[count - 1];


	}

	// 원래배열로 크기 돌려주기
	public void trimToSize() {
		String[] newList = new String[index];
		for (int i = 0; i < index; i++) {
			newList[i] = list[i];
		}
		list = newList;

	}


	public void clear() {
		index = 0;

	}
}


